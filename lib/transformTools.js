// Generated by CoffeeScript 1.6.3
(function() {
  var configCache, endsWith, falafel, fs, getConfigFromCache, loadJsonAsync, parentDir, parentDirSync, path, skipFile, storeConfigInCache, through;

  path = require('path');

  fs = require('fs');

  through = require('through');

  falafel = require('falafel');

  parentDir = require('find-parent-dir');

  endsWith = function(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
  };

  skipFile = function(file, options) {
    var answer, extension, includeThisFile, _i, _j, _len, _len1, _ref, _ref1;
    answer = false;
    if (options.excludeExtensions) {
      _ref = options.excludeExtensions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        extension = _ref[_i];
        if (endsWith(file, extension)) {
          answer = true;
        }
      }
    }
    if (options.includeExtensions) {
      includeThisFile = false;
      _ref1 = options.includeExtensions;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        extension = _ref1[_j];
        if (endsWith(file, extension)) {
          includeThisFile = true;
          break;
        }
      }
      if (!includeThisFile) {
        answer = true;
      }
    }
    return answer;
  };

  exports.makeStringTransform = function(transformName, options, transformFn) {
    if (options == null) {
      options = {};
    }
    if (transformFn == null) {
      transformFn = options;
      options = {};
    }
    return function(file) {
      var content, end, write;
      if (skipFile(file, options)) {
        return through();
      }
      content = '';
      write = function(buf) {
        return content += buf;
      };
      end = function() {
        var handleError,
          _this = this;
        handleError = function(error) {
          if (error instanceof Error && error.message) {
            error.message += " (while processing " + file + ")";
          } else {
            error = new Error("" + error + " (while processing " + file + ")");
          }
          return _this.emit('error', error);
        };
        return exports.loadTransformConfig(transformName, file, function(err, config) {
          if (err) {
            return handleError(err);
          }
          try {
            return transformFn(content, {
              file: file,
              config: config
            }, function(err, transformed) {
              if (err) {
                return handleError(err);
              }
              _this.queue(String(transformed));
              return _this.queue(null);
            });
          } catch (_error) {
            err = _error;
            return handleError(err);
          }
        });
      };
      return through(write, end);
    };
  };

  exports.makeFalafelTransform = function(transformName, options, transformFn) {
    var falafelOptions, _ref;
    if (options == null) {
      options = {};
    }
    if (transformFn == null) {
      transformFn = options;
      options = {};
    }
    falafelOptions = (_ref = options.falafelOptions) != null ? _ref : {};
    return exports.makeStringTransform(transformName, options, function(content, transformOptions, done) {
      var pending, transformCb, transformErr, transformed;
      transformErr = null;
      pending = 1;
      transformed = null;
      transformCb = function(err) {
        if (err && !transformErr) {
          transformErr = err;
          done(err);
        }
        if (transformErr) {
          return;
        }
        pending--;
        if (pending === 0) {
          return done(null, transformed);
        }
      };
      transformed = falafel(content, falafelOptions, function(node) {
        var err;
        pending++;
        try {
          return transformFn(node, transformOptions, transformCb);
        } catch (_error) {
          err = _error;
          return transformCb(err);
        }
      });
      return transformCb(transformErr, transformed);
    });
  };

  configCache = {};

  getConfigFromCache = function(transformName, packageDir) {
    var cacheKey;
    cacheKey = "" + transformName + ":" + packageDir;
    if (configCache[cacheKey] != null) {
      return configCache[cacheKey];
    } else {
      return null;
    }
  };

  storeConfigInCache = function(transformName, packageDir, config) {
    var cacheKey;
    cacheKey = "" + transformName + ":" + packageDir;
    return configCache[cacheKey] = config;
  };

  loadJsonAsync = function(filename, done) {
    return fs.readFile(filename, "utf-8", function(err, content) {
      if (err) {
        return done(err);
      }
      try {
        return done(null, JSON.parse(content));
      } catch (_error) {
        err = _error;
        return done(err);
      }
    });
  };

  exports.loadTransformConfig = function(transformName, file, done) {
    var dirname;
    dirname = path.dirname(file);
    return parentDir(dirname, 'package.json', function(err, packageDir) {
      var config, packageFile;
      if (err) {
        return done(err);
      }
      config = getConfigFromCache(transformName, packageDir);
      if (config) {
        return done(null, config);
      } else if (packageDir != null) {
        packageFile = path.join(packageDir, 'package.json');
        return loadJsonAsync(packageFile, function(err, pkg) {
          var configFile;
          if (err) {
            return done(err);
          }
          config = pkg[transformName];
          if ((config != null) && (typeof config === "string")) {
            configFile = path.resolve(packageDir, config);
            try {
              config = require(configFile);
            } catch (_error) {
              err = _error;
              return done(err);
            }
          }
          storeConfigInCache(transformName, packageDir, config);
          return done(null, config);
        });
      } else {
        return done(null, null);
      }
    });
  };

  parentDirSync = function(startDir, fileToFind) {
    var answer, dirToCheck, existsSync, oldDirToCheck, _ref;
    existsSync = (_ref = fs.existsSync) != null ? _ref : path.existsSync;
    dirToCheck = path.resolve(startDir);
    answer = null;
    while (true) {
      if (existsSync(path.join(dirToCheck, fileToFind))) {
        answer = dirToCheck;
        break;
      }
      oldDirToCheck = dirToCheck;
      dirToCheck = path.dirname(dirToCheck);
      if (oldDirToCheck === dirToCheck) {
        break;
      }
    }
    return answer;
  };

  exports.loadTransformConfigSync = function(transformName, file) {
    var config, configFile, dirname, packageDir, packageFile, pkg;
    config = null;
    dirname = path.dirname(file);
    packageDir = parentDirSync(dirname, 'package.json');
    config = getConfigFromCache(transformName, packageDir);
    if (!config && (packageDir != null)) {
      packageFile = path.join(packageDir, 'package.json');
      pkg = require(packageFile);
      config = pkg[transformName];
      if ((config != null) && (typeof config === "string")) {
        configFile = path.resolve(packageDir, config);
        config = require(configFile);
      }
      storeConfigInCache(transformName, packageDir, config);
    }
    return config;
  };

  exports.clearConfigCache = function() {
    return configCache = {};
  };

  exports.runTransform = function(transform, file, options, done) {
    var doTransform;
    if (options == null) {
      options = {};
    }
    if (done == null) {
      done = options;
      options = {};
    }
    doTransform = function(content) {
      var data, err, throughStream;
      data = "";
      err = null;
      throughStream = transform(file);
      throughStream.on("data", function(d) {
        return data += d;
      });
      throughStream.on("end", function() {
        if (!err) {
          return done(null, data);
        }
      });
      throughStream.on("error", function(e) {
        err = e;
        return done(err);
      });
      throughStream.write(content);
      return throughStream.end();
    };
    if (options.content) {
      return process.nextTick(function() {
        return doTransform(options.content);
      });
    } else {
      return fs.readFile(file, "utf-8", function(err, content) {
        if (err) {
          return done(err);
        }
        return doTransform(content);
      });
    }
  };

}).call(this);
