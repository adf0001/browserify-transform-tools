// Generated by CoffeeScript 1.6.3
(function() {
  var configCache, endsWith, falafel, fs, parentDirSync, path, readConfigFromPacakge, through;

  path = require('path');

  fs = require('fs');

  through = require('through');

  falafel = require('falafel');

  endsWith = function(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
  };

  parentDirSync = function(startDir, fileToFind) {
    var answer, dirToCheck, existsSync, oldDirToCheck, _ref;
    existsSync = (_ref = fs.existsSync) != null ? _ref : path.existsSync;
    dirToCheck = path.resolve(startDir);
    answer = null;
    while (true) {
      if (existsSync(path.join(dirToCheck, fileToFind))) {
        answer = dirToCheck;
        break;
      }
      oldDirToCheck = dirToCheck;
      dirToCheck = path.dirname(dirToCheck);
      if (oldDirToCheck === dirToCheck) {
        break;
      }
    }
    return answer;
  };

  exports.makeStringTransform = function(transformName, options, transformFn) {
    if (options == null) {
      options = {};
    }
    if (transformFn == null) {
      transformFn = options;
      options = {};
    }
    return function(file) {
      var data, end, extension, includeThisFile, write, _i, _j, _len, _len1, _ref, _ref1;
      if (options.excludeExtensions) {
        _ref = options.excludeExtensions;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          extension = _ref[_i];
          if (endsWith(file, extension)) {
            return through();
          }
        }
      }
      if (options.includeExtensions) {
        includeThisFile = false;
        _ref1 = options.includeExtensions;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          extension = _ref1[_j];
          if (endsWith(file, extension)) {
            includeThisFile = true;
            break;
          }
        }
        if (!includeThisFile) {
          return through();
        }
      }
      data = '';
      write = function(buf) {
        return data += buf;
      };
      end = function() {
        var config, err, output;
        try {
          config = exports.loadTransformConfigSync(transformName, file);
          output = transformFn(data, {
            file: file,
            config: config
          });
        } catch (_error) {
          err = _error;
          this.emit('error', new Error(err.toString() + (" (" + file + ")")));
        }
        this.queue(String(output));
        return this.queue(null);
      };
      return through(write, end);
    };
  };

  exports.makeFalafelTransform = function(transformName, options, transformFn) {
    if (options == null) {
      options = {};
    }
    if (transformFn == null) {
      transformFn = options;
      options = {};
    }
    return exports.makeStringTransform(transformName, options, function(content, transformOptions) {
      return falafel(content, function(node) {
        return transformFn(node, transformOptions);
      });
    });
  };

  readConfigFromPacakge = function(transformName, packageDir) {
    var answer, configFile, packageFile, pkg;
    answer = null;
    if (packageDir != null) {
      packageFile = path.join(packageDir, 'package.json');
      pkg = require(packageFile);
      answer = pkg[transformName];
      if ((answer != null) && (typeof answer === "string")) {
        configFile = path.resolve(packageDir, answer);
        answer = require(configFile);
      }
    }
    return answer;
  };

  configCache = {};

  exports.loadTransformConfigSync = function(transformName, file) {
    var answer, dirname, packageDir;
    answer = null;
    if (transformName in configCache) {
      answer = configCache[transformName];
    } else {
      dirname = path.dirname(file);
      packageDir = parentDirSync(dirname, 'package.json');
      answer = readConfigFromPacakge(transformName, packageDir);
      configCache[transformName] = answer;
    }
    return answer;
  };

  exports.runTransform = function(transform, file, options, done) {
    var doTransform;
    if (options == null) {
      options = {};
    }
    if (done == null) {
      done = options;
      options = {};
    }
    doTransform = function(content) {
      var data, err, throughStream;
      data = "";
      err = null;
      throughStream = transform(file);
      throughStream.on("data", function(d) {
        return data += d;
      });
      throughStream.on("end", function() {
        return done(err, data);
      });
      throughStream.on("error", function(e) {
        return err = e;
      });
      throughStream.write(content);
      return throughStream.end();
    };
    if (options.content) {
      return process.nextTick(function() {
        return doTransform(options.content);
      });
    } else {
      return fs.readFile(file, "utf-8", function(err, content) {
        if (err) {
          return done(err);
        }
        return doTransform(content);
      });
    }
  };

}).call(this);
